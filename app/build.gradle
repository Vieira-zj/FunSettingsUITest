apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId 'com.example.zhengjin.funsettingsuitest'
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            keyAlias key_alias
            keyPassword key_password
            storePassword keystore_password
        }
    }
    buildTypes {
        debug {
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            versionNameSuffix '_debug'
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled false  // Jacoco coverage test
        }
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        exclude 'NOTICE'
        exclude 'LICENSE.txt'
    }
    useLibrary('org.apache.http.legacy')
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    // Set this dependency to build and run Espresso tests
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //  Set this dependency to build and run UI Automator tests
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    // RecycleViews Espresso supports
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    implementation 'com.android.support:appcompat-v7:28.0.0-rc02'
    implementation 'com.android.support:support-v4:28.0.0-rc02'
    implementation 'com.android.support:design:28.0.0-rc02'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
}

// Generate Jacoco coverage html report from coverage.ec
// Command: $ gradlew jacocoTestReport
apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport) {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(['../app/src/main/java'])
    executionData = files { file("$buildDir/outputs/code-coverage/connected").listFiles() }

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}